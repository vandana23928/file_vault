app.py:

from flask import Flask, render_template, request, send_file, after_this_request
from werkzeug.utils import secure_filename
from crypto import CryptoVault
import os
import logging

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB limit
app.secret_key = os.urandom(24)

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

vault = CryptoVault()

def ensure_directories():
    directories = ['uploads', 'keys', 'static', 'templates']
    for directory in directories:
        if not os.path.exists(directory):
            os.makedirs(directory)

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in {'txt', 'pdf', 'doc', 'docx', 'jpg', 'png', 'enc'}

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        if 'file' not in request.files:
            return render_template('index.html', error="No file part")
            
        file = request.files['file']
        if file.filename == '':
            return render_template('index.html', error="No selected file")
            
        if not allowed_file(file.filename):
            return render_template('index.html', error="Invalid file format")
            
        operation = request.form.get('operation')
        
        filename = secure_filename(file.filename)
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(file_path)
        
        try:
            if operation == 'encrypt':
                result_path = vault.encrypt_file(file_path, "keys/public.pem")
            elif operation == 'decrypt':
                result_path = vault.decrypt_file(file_path, "keys/private.pem")
            else:
                raise ValueError("Invalid operation")

            @after_this_request
            def cleanup(response):
                try:
                    if os.path.exists(file_path):
                        os.remove(file_path)
                    if os.path.exists(result_path):
                        os.remove(result_path)
                except Exception as e:
                    logger.error(f"Cleanup error: {str(e)}")
                return response

            return send_file(
                result_path,
                as_attachment=True,
                download_name=os.path.basename(result_path)
            )

        except Exception as e:
            logger.error(f"Processing error: {str(e)}")
            if os.path.exists(file_path):
                try:
                    os.remove(file_path)
                except:
                    pass
            return render_template('index.html', error=f"Error processing file: {str(e)}")

    return render_template('index.html')

if __name__ == '__main__':
    ensure_directories()
    app.run(debug=True, host='0.0.0.0', port=5000)



crypto.py:

import os
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.asymmetric import padding, rsa
from cryptography.hazmat.primitives.ciphers.aead import AESGCM
from cryptography.hazmat.backends import default_backend
import hashlib

class CryptoError(Exception):
    """Base class for cryptographic exceptions"""
    pass

class IntegrityCheckError(CryptoError):
    """Raised when integrity verification fails"""
    pass

class CryptoVault:
    def __init__(self, key_dir="keys"):
        self.key_dir = key_dir
        os.makedirs(key_dir, exist_ok=True)

    def generate_key_pair(self):
        try:
            private_key = rsa.generate_private_key(
                public_exponent=65537,
                key_size=4096,
                backend=default_backend()
            )
            
            self._save_key("private.pem", private_key.private_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PrivateFormat.PKCS8,
                encryption_algorithm=serialization.NoEncryption()
            ))
            
            self._save_key("public.pem", private_key.public_key().public_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PublicFormat.SubjectPublicKeyInfo
            ))

        except Exception as e:
            raise CryptoError(f"Key generation failed: {str(e)}")

    def _save_key(self, filename, content):
        try:
            with open(os.path.join(self.key_dir, filename), "wb") as f:
                f.write(content)
        except IOError as e:
            raise CryptoError(f"Key storage failed: {str(e)}")

    def encrypt_file(self, input_path, public_key_path):
        try:
            if not os.path.exists(input_path):
                raise FileNotFoundError("Input file not found")
                
            if os.path.getsize(input_path) == 0:
                raise ValueError("Cannot encrypt empty file")

            aes_key = AESGCM.generate_key(bit_length=256)
            nonce = os.urandom(12)
            aesgcm = AESGCM(aes_key)
            
            with open(input_path, "rb") as f:
                plaintext = f.read()
                file_hash = hashlib.sha256(plaintext).digest()

            ciphertext = aesgcm.encrypt(nonce, plaintext + file_hash, None)

            with open(public_key_path, "rb") as key_file:
                public_key = serialization.load_pem_public_key(
                    key_file.read(),
                    backend=default_backend()
                )

            encrypted_aes_key = public_key.encrypt(
                aes_key,
                padding.OAEP(
                    mgf=padding.MGF1(algorithm=hashes.SHA512()),
                    algorithm=hashes.SHA512(),
                    label=None
                )
            )

            output_path = f"{input_path}.enc"
            with open(output_path, "wb") as outfile:
                outfile.write(nonce + encrypted_aes_key + ciphertext)

            return output_path

        except Exception as e:
            raise CryptoError(f"Encryption failed: {str(e)}")

    def decrypt_file(self, input_path, private_key_path):
        try:
            if not os.path.exists(input_path):
                raise FileNotFoundError("Input file not found")
                
            if os.path.getsize(input_path) < 560:
                raise ValueError("Invalid encrypted file")

            with open(input_path, "rb") as infile:
                nonce = infile.read(12)
                encrypted_aes_key = infile.read(512)
                ciphertext = infile.read()

            with open(private_key_path, "rb") as key_file:
                private_key = serialization.load_pem_private_key(
                    key_file.read(),
                    password=None,
                    backend=default_backend()
                )

            aes_key = private_key.decrypt(
                encrypted_aes_key,
                padding.OAEP(
                    mgf=padding.MGF1(algorithm=hashes.SHA512()),
                    algorithm=hashes.SHA512(),
                    label=None
                )
            )

            aesgcm = AESGCM(aes_key)
            decrypted_data = aesgcm.decrypt(nonce, ciphertext, None)
            
            if len(decrypted_data) < 32:
                raise IntegrityCheckError("Invalid decrypted data length")

            plaintext, stored_hash = decrypted_data[:-32], decrypted_data[-32:]
            computed_hash = hashlib.sha256(plaintext).digest()

            if computed_hash != stored_hash:
                raise IntegrityCheckError("File integrity check failed")

            output_path = input_path[:-4] if input_path.endswith(".enc") else f"{input_path}.dec"
            with open(output_path, "wb") as outfile:
                outfile.write(plaintext)

            return output_path

        except Exception as e:
            raise CryptoError(f"Decryption failed: {str(e)}")



index.html

<!DOCTYPE html>
<html>
<head>
    <title>Secure File Vault</title>
    <link rel="stylesheet" href="/static/styles.css">
</head>
<body>
    <div class="container">
        <h1>Secure File Vault</h1>
        {% if error %}
        <div class="error-message">{{ error }}</div>
        {% endif %}
        <form method="POST" enctype="multipart/form-data">
            <div class="form-group">
                <input type="file" name="file" required>
            </div>
            
            <div class="form-group">
                <select name="operation" required>
                    <option value="encrypt">Encrypt</option>
                    <option value="decrypt">Decrypt</option>
                </select>
            </div>
            
            <button type="submit">Process File</button>
        </form>
    </div>
</body>
</html>



styles.css

body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 20px;
    background: #f0f2f5;
}

.container {
    max-width: 600px;
    margin: 0 auto;
    background: white;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

h1 {
    color: #1a73e8;
    text-align: center;
    margin-bottom: 30px;
}

.form-group {
    margin-bottom: 20px;
}

input[type="file"] {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

select {
    width: 100%;
    padding: 10px;
    margin: 5px 0;
    border: 1px solid #ddd;
    border-radius: 4px;
}

button {
    background: #1a73e8;
    color: white;
    border: none;
    padding: 12px 24px;
    border-radius: 4px;
    cursor: pointer;
    width: 100%;
    font-size: 16px;
}

button:hover {
    background: #1557b0;
}

.error-message {
    background-color: #ffebee;
    color: #c62828;
    padding: 10px;
    margin-bottom: 20px;
    border-radius: 4px;
    text-align: center;
}
